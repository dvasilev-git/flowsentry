const axios = require('axios');
const fs = require('fs');

async function generateWeeklyReport() {
  console.log('📊 Generating weekly report...');
  
  // For demo purposes, we'll generate a sample report
  // In production, this would query Grafana Cloud API for real data
  const endTime = Math.floor(Date.now() / 1000);
  const startTime = endTime - (7 * 24 * 60 * 60);
  
  // Sample data - replace with actual Grafana queries
  const sampleData = {
    overallUptime: 99.8,
    incidents: 0,
    avgResponseTime: 1.2,
    fastestPage: 'Homepage (0.8s)',
    slowestPage: 'Checkout (2.1s)',
    flowSuccessRate: 99.5,
    flowP95: 3.2,
    topIssues: [
      'Slow checkout page on Friday',
      'Brief homepage timeout on Tuesday'
    ],
    recommendations: [
      'Optimize checkout page images',
      'Add CDN for static assets'
    ]
  };
  
  const report = `# Weekly Web Health Report

**Period:** ${new Date(startTime * 1000).toLocaleDateString()} - ${new Date(endTime * 1000).toLocaleDateString()}

## Summary
- **Overall Uptime:** ${sampleData.overallUptime}%
- **Incidents:** ${sampleData.incidents}
- **Average Response Time:** ${sampleData.avgResponseTime}s

## Highlights
- **Fastest page (p95):** ${sampleData.fastestPage}
- **Slowest page (p95):** ${sampleData.slowestPage}
- **Checkout flow:** ${sampleData.flowSuccessRate}% success, p95 ${sampleData.flowP95}s

## Top Issues
${sampleData.topIssues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}

## Recommendations
${sampleData.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

## Technical Details

### Uptime by Site
- Demo Client 1: 99.9% (2 incidents, 0.1% downtime)
- Demo Client 2: 99.7% (1 incident, 0.3% downtime)

### Response Time Trends
- Homepage: 0.8s avg (target: <2.5s) ✅
- Checkout: 2.1s avg (target: <2.5s) ✅
- Product pages: 1.5s avg (target: <2.5s) ✅

### Synthetic Flow Performance
- Success rate: 99.5% (target: >99.0%) ✅
- Average completion time: 3.2s (target: <8s) ✅
- Failures: 2 (both due to temporary network issues)

---

*Report generated by FlowSentry Monitoring*
*Next report: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}*
`;

  // Save report
  const reportFile = `./reports/weekly-${new Date().toISOString().split('T')[0]}.md`;
  if (!fs.existsSync('./reports')) {
    fs.mkdirSync('./reports');
  }
  fs.writeFileSync(reportFile, report);
  console.log(`📄 Weekly report generated: ${reportFile}`);
  
  // Also save to results directory
  if (!fs.existsSync('./results')) {
    fs.mkdirSync('./results');
  }
  fs.writeFileSync('./results/latest-weekly-report.md', report);
  
  return report;
}

// Function to query real Grafana data (for production use)
async function queryGrafanaData(startTime, endTime) {
  if (!process.env.GRAFANA_API_KEY || !process.env.GRAFANA_INSTANCE_ID) {
    console.log('⚠️  Grafana credentials not found, using sample data');
    return null;
  }
  
  const baseUrl = `https://${process.env.GRAFANA_INSTANCE_ID}.grafana.net`;
  
  try {
    // Query uptime data
    const uptimeQuery = {
      query: 'avg_over_time(website_uptime[7d])',
      start: startTime,
      end: endTime
    };
    
    const response = await axios.post(`${baseUrl}/api/v1/query`, uptimeQuery, {
      headers: {
        'Authorization': `Bearer ${process.env.GRAFANA_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('Failed to query Grafana:', error.message);
    return null;
  }
}

// Run if called directly
if (require.main === module) {
  generateWeeklyReport()
    .then(() => {
      console.log('✅ Weekly report generation completed');
      process.exit(0);
    })
    .catch(error => {
      console.error('💥 Error generating weekly report:', error);
      process.exit(1);
    });
}

module.exports = { generateWeeklyReport, queryGrafanaData };
